import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;
import java.util.Stack;
import java.util.ArrayList;

class Result {

    /*
     * Complete the 'largestRectangle' function below.
     *
     * The function is expected to return a LONG_INTEGER.
     * The function accepts INTEGER_ARRAY h as parameter.
     */

    public static long largestRectangle(List<Integer> h) {
        
    // Write your code here
    int n = h.size();
    int left[] = new int[n];
    int right[] = new int[n];
    Stack <Integer> stack = new Stack<>();
    
    // left smaller element;
    for(int i = 0; i<n;++i){
        int element = h.get(i);
        while(!stack.isEmpty() && h.get(stack.peek())>= element){
            stack.pop();
        }
        left[i] = stack.isEmpty() ? -1 : stack.peek();
        stack.push(i);
    }
        stack.clear();
        
        // right smaller element;
        
        for(int i = n-1; i>=0; --i){
            int element = h.get(i);
            while(!stack.isEmpty()&& h.get(stack.peek())>= element){
                stack.pop();
            } 
            right[i] = stack.isEmpty() ? n : stack.peek();
            stack.push(i);
        }
        long ans = 0;
        
        for(int i = 0; i<n; ++i){
            long curArea = (right[i]-left[i] -1) * h.get(i);
           ans = Math.max(ans, curArea );
        }
        
        return ans;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> h = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        long result = Result.largestRectangle(h);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
