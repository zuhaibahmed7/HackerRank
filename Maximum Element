import java.io.*;
import java.util.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;

class Result {

    /*
     * Complete the 'getMax' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts STRING_ARRAY operations as parameter.
     */

    public static List<Integer> getMax(List<String> operations) {

        List<Integer> ans = new ArrayList<>();
        Stack<Integer> mainStack = new Stack<>();
        Stack<Integer> maxStack = new Stack<>();

        for (String operation : operations) {

            String[] str = operation.split(" ");
            int op = Integer.parseInt(str[0]);

            if (op == 1) {
                int val = Integer.parseInt(str[1]);
                mainStack.push(val);

                if (maxStack.isEmpty() || val >= maxStack.peek()) {
                    maxStack.push(val);
                }

            } else if (op == 2) {
                if (!mainStack.isEmpty()) {
                    int removed = mainStack.pop();
                    if (!maxStack.isEmpty() && removed == maxStack.peek()) {
                        maxStack.pop();
                    }
                }

            } else if (op == 3) {
                if (!maxStack.isEmpty()) {
                    ans.add(maxStack.peek());
                }
            }
        }
        return ans;
    }
}

public class Solution {

    public static void main(String[] args) throws IOException {

        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<String> ops = IntStream.range(0, n).mapToObj(i -> {
            try {
                return bufferedReader.readLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        }).collect(toList());

        List<Integer> res = Result.getMax(ops);

        bufferedWriter.write(
                res.stream()
                        .map(Object::toString)
                        .collect(joining("\n"))
                        + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
